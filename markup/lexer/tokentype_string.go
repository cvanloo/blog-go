// Code generated by "stringer -type TokenType -trimprefix Token"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenEOF-0]
	_ = x[TokenMetaBegin-1]
	_ = x[TokenMetaKey-2]
	_ = x[TokenMetaEnd-3]
	_ = x[TokenHtmlTagOpen-4]
	_ = x[TokenHtmlTagAttrKey-5]
	_ = x[TokenHtmlTagAttrVal-6]
	_ = x[TokenHtmlTagClose-7]
	_ = x[TokenParagraphBegin-8]
	_ = x[TokenParagraphEnd-9]
	_ = x[TokenSection1-10]
	_ = x[TokenSection2-11]
	_ = x[TokenMono-12]
	_ = x[TokenCodeBlockBegin-13]
	_ = x[TokenCodeBlockLang-14]
	_ = x[TokenCodeBlockSource-15]
	_ = x[TokenCodeBlockLineFirst-16]
	_ = x[TokenCodeBlockLineLast-17]
	_ = x[TokenCodeBlockEnd-18]
	_ = x[TokenText-19]
	_ = x[TokenEmphasis-20]
	_ = x[TokenStrong-21]
	_ = x[TokenEmphasisStrong-22]
	_ = x[TokenLinkHref-23]
	_ = x[TokenLinkText-24]
	_ = x[TokenAmpSpecial-25]
	_ = x[TokenEscaped-26]
	_ = x[TokenBlockquoteBegin-27]
	_ = x[TokenBlockquoteAttribution-28]
	_ = x[TokenBlockquoteEnd-29]
	_ = x[TokenEnquoteBegin-30]
	_ = x[TokenEnquoteEnd-31]
	_ = x[TokenImage-32]
	_ = x[TokenImageTitle-33]
	_ = x[TokenImagePath-34]
	_ = x[TokenImageAlt-35]
	_ = x[TokenHorizontalRule-36]
}

const _TokenType_name = "EOFMetaBeginMetaKeyMetaEndHtmlTagOpenHtmlTagAttrKeyHtmlTagAttrValHtmlTagCloseParagraphBeginParagraphEndSection1Section2MonoCodeBlockBeginCodeBlockLangCodeBlockSourceCodeBlockLineFirstCodeBlockLineLastCodeBlockEndTextEmphasisStrongEmphasisStrongLinkHrefLinkTextAmpSpecialEscapedBlockquoteBeginBlockquoteAttributionBlockquoteEndEnquoteBeginEnquoteEndImageImageTitleImagePathImageAltHorizontalRule"

var _TokenType_index = [...]uint16{0, 3, 12, 19, 26, 37, 51, 65, 77, 91, 103, 111, 119, 123, 137, 150, 165, 183, 200, 212, 216, 224, 230, 244, 252, 260, 270, 277, 292, 313, 326, 338, 348, 353, 363, 372, 380, 394}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
